services:
##############################################
#                                            #
#         下载器部分，全选/不选/选其一           #
#                                            #
##############################################

  transmission:
    image: linuxserver/transmission:latest
    container_name: mp-transmission
    hostname: mp-transmission
    volumes:
      - /mnt/user/System/appdata/MediaCenter/transmission:/config
      # 配置文件目录
      - /mnt/user/Seeds/刷流:/downloads
      # 默认下载目录

    environment:
      - TRANSMISSION_WEB_HOME=/config/webui
      # WEBUI主页路径，写容器路径，用于放汉化文件
      # 汉化文件下载地址：https://github.com/ronggang/transmission-web-control
      # 将 "/src" 这个文件夹里的东西放到 "/mnt/user/appdata/transmission/webui" 内即可
      - USER=admin
      - PASS=102413
      # TR账号密码，预设为unraid，记住一定要修改密码，否则后果自负
      - PEERPORT=24680
      # 自定义peer传输端口
      - PUID=0
      - PGID=0
      - UMASK=022
      - TZ=Asia/Shanghai
    network_mode: host
    # 如需修改WebUI的端口，到/config/setting.json中第54行的"rpc-port": 9091的端口改为自定义端口
    restart: unless-stopped
    labels:
      net.unraid.docker.managed: dockerman
      net.unraid.docker.webui: http://[IP]:[PORT:19091]
      # 适用于unraid界面打开WebUI，注意端口号写的是容器端口，如有自定义，自行修改
      net.unraid.docker.icon: /boot/config/plugins/compose.manager/projects/logos/transmission.png
      # 适用于unraid的图标，可以写unRAID的路径地址，也可以写一个图标地址(局域网或广域网均可)
      # 注意：通过compose创建的docker容器，无法在unRAID上进行编辑

##############################################
#                                            #
#       自动化刮削整理工具，根据需要部署          #
#                                            #
##############################################

  moviepilot-v2:
    image: jxxghp/moviepilot-v2:latest
    container_name: mp-moviepilot-v2
    hostname: mp-moviepilot-v2
    restart: unless-stopped
    network_mode: host

##############################################
## 第一次运行时，MoviePilot 会下载大量文件到本地，请在留意日志中的进度，如果有什么问题，可以寻找网友求助
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      # 使MP支持内建的重启操作，用于自动更新后重启
      - /mnt/user/System/appdata/MediaCenter/moviepilot-v2/core:/moviepilot/.cache/ms-playwright
      ## 内核浏览器
      - /mnt/user/System/appdata/MediaCenter/moviepilot-v2/config:/config
      ## 配置目录
      - /mnt/user/Seeds/刷流:/downloads
      # 默认下载目录

      - /mnt/user/System/appdata/MediaCenter/qbittorrent/qBittorrent/BT_backup:/QB-BT
      - /mnt/user/System/appdata/MediaCenter/transmission/torrents:/TR-BT
      # 用于自动转种所使用的路径，请根据实际情况修改，模板仅供参考，如不需要，则删除掉

##############################################
    environment:
      - MOVIEPILOT_AUTO_UPDATE=true
      # 设置容器重启时自动更新，true/release/dev/false，默认release，插件的自动更新要设置为true
      # 需要能正常连接Github 注意：如果出现网络问题可以配置PROXY_HOST
      - API_TOKEN=1234567890123456
      # API密钥，V1版本默认为moviepilot，V2版本需要手动配置为大于等于16个字符的复杂字符串
      # 如配置不符合要求将会强制重新生成，可在首次启动的启动日志或env配置文件中查看最新的值
      # 在媒体服务器Webhook、微信回调等地址配置中需要加上 ?token= 该值
      
      - NGINX_PORT=55055
      # WebUI服务端口，默认为3000，预设为55055，可自行修改
      - PORT=55056
      # API端口，默认为3001，预设为55056，可自行修改
      
      - SUPERUSER=admin
      # 超级管理者用户名，默认为admin，可在MP内修改，初次安装后失效
      # 密码在日志里，只会在第一次部署出现，如果忘记，可以文本形式打开 /config/logs/moviepilot.log 该文件，查看日志获取
      # 如果非初始密码忘记了，得删除pgsql的所有文件，然后重新配置，注意查看，可在MP内修改
      - SUPERUSER_PASSWORD=102413

      - TZ=Asia/Shanghai
      # 时区

      # - MOVIE_RENAME_FORMAT={{title}}{% if year %} ({{year}}){% endif %}/{{title}}.{{original_name}}
      # - TV_RENAME_FORMAT={{title}}{% if year %} ({{year}}){% endif %}/S0{{season}}/{{original_name}}
      # 电影和电视剧重命名格式，个人自用，默认不使用，仅作记录

########################################
#### 数据库 ####
# 不需要修改，照抄

      ### 如果你有一个pgsql的容器，懂得使用方法，可以根据实际情况填写 ###
      - DB_TYPE=postgresql
      - DB_POSTGRESQL_HOST=localhost
      - DB_POSTGRESQL_PORT=55053
      # pgsql数据库的访问端口，本模板pgsql的端口预设为55053
      - DB_POSTGRESQL_DATABASE=moviepilot
      - DB_POSTGRESQL_USERNAME=moviepilot
      - DB_POSTGRESQL_PASSWORD=moviepilot
      # pgsql数据库的子数据库的名字、账号、密码，统一为 moviepilot

      ### 如果你有一个redis的容器，懂得使用方法，可以根据实际情况填写 ###
      - CACHE_BACKEND_TYPE=redis
      - CACHE_BACKEND_URL=redis://:moviepilot@localhost:55054
      # 连接redis，本模板redis的访问端口预设为55054
    depends_on:
      mp-pgsql:
        condition: service_healthy
      mp-redis:
        condition: service_healthy
    # 关联pgsql和redis，照抄
    labels:
      net.unraid.docker.managed: dockerman
      net.unraid.docker.webui: http://[IP]:[PORT:55055]
      # 适用于unraid界面打开WebUI，注意端口号写的是容器端口，如有自定义，自行修改
      net.unraid.docker.icon: /boot/config/plugins/compose.manager/projects/logos/moviepilot.png
      # 适用于unraid的图标，可以写unRAID的路径地址，也可以写一个图标地址(局域网或广域网均可)
      # 注意：通过compose创建的docker容器，无法在unRAID上进行编辑

##############################################
#                                            #
#         给MP配上数据库，模板包含，必须         #
#                                            #
##############################################
# 不需要修改，照抄

  mp-redis:
    image: redis:latest
    container_name: mp-redis
    hostname: mp-redis
    command: redis-server --save 600 1 --requirepass moviepilot
    # 最后一串字符为redis的密码，预设为moviepilot
    volumes:
      - /mnt/user/System/appdata/MediaCenter/redis:/data
      # 数据目录
    network_mode: bridge
    # 模板预设使用bridge网络模式，如果懂得使用方法，可以根据实际情况来修改
    ports:
      - 55054:6379/tcp
      # 注意：并不存在WebUI，只需要通过IP:PORT调用即可，模板预设
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    labels:
      net.unraid.docker.managed: dockerman
      net.unraid.docker.icon: /boot/config/plugins/compose.manager/projects/logos/redis.png

  mp-pgsql:
    image: postgres:17
    container_name: mp-pgsql
    hostname: mp-pgsql
    volumes:
      - /mnt/user/System/appdata/MediaCenter/pgsql:/var/lib/postgresql/data
      # 数据目录
    environment:    
      - POSTGRES_DB=moviepilot
      - POSTGRES_USER=moviepilot
      - POSTGRES_PASSWORD=moviepilot
      # 预设新建一个子数据库，子账号及其密码，统一为 moviepilot
    network_mode: bridge
    ports:
      - 55053:5432/tcp
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U moviepilot -d moviepilot"]
      interval: 10s
      timeout: 5s
      retries: 5
    labels:
      net.unraid.docker.managed: dockerman
      net.unraid.docker.icon: /boot/config/plugins/compose.manager/projects/logos/postgresql.png

##############################################
#                                            #
#          其他辅助工具，根据需要部署            #
#                                            #
##############################################

  iyuuplus:
    image: iyuucn/iyuuplus-dev:latest
    container_name: mp-iyuuplus
    hostname: mp-iyuuplus
    volumes:
      - /mnt/user/System/appdata/MediaCenter/iyuuplus/iyuu:/iyuu
      # 配置文件目录，存放源码
      - /mnt/user/System/appdata/MediaCenter/iyuuplus/data:/data
      # 数据库目录，存放mysql数据库
    network_mode: bridge
    ports:
      - 8780:8780
      # 注：8780是容器内nginx的监听端口，反向代理了 8787、3131
    restart: unless-stopped
    labels:
      net.unraid.docker.managed: dockerman
      net.unraid.docker.webui: http://[IP]:[PORT:8780]
      # 适用于unraid界面打开WebUI，注意端口号写的是容器端口，如有自定义，自行修改
      net.unraid.docker.icon: /boot/config/plugins/compose.manager/projects/logos/iyuu.png
      # 适用于unraid的图标，可以写unRAID的路径地址，也可以写一个图标地址(局域网或广域网均可)
      # 注意：通过compose创建的docker容器，无法在unRAID上进行编辑
      
##############################################
